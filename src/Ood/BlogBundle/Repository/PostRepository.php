<?php
/**
 * This file is part of oc_snowtricks project
 *
 * @author: SÃ©bastien CHOMY <sebastien.chomy@gmail.com>
 * @since 2018/01
 */

namespace Ood\BlogBundle\Repository;

use Ood\AppBundle\Services\Paginate\Paginator;
use Ood\BlogBundle\Entity\Post;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Pagerfanta\Pagerfanta;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends ServiceEntityRepository
{
    /**
     * @var Paginator
     */
    protected $paginator;

    /**
     * ProductRepository constructor.
     *
     * @param RegistryInterface $registry
     * @param Paginator         $paginator
     */
    public function __construct(RegistryInterface $registry, Paginator $paginator)
    {
        $this->paginator = $paginator;

        parent::__construct($registry, Post::class);
    }

    /**
     * @param int|null $maxPerPage
     * @param int|null $currentPage
     *
     * @throws \LogicException
     *
     * @return Pagerfanta
     */
    public function findAllWithPaginate($maxPerPage = null, $currentPage = null): Pagerfanta
    {
        $qb = $this->createQueryBuilder('p');
        return $this->paginator->paginate($qb, $maxPerPage, $currentPage);
    }

    /**
     * @param string $uniqueID
     *
     * @return mixed
     */
    public function getByUniqueID(string $uniqueID) {

        $qb = $this->createQueryBuilder('P');
        $qb->where('P.uniqueID = :uniqueID');

        $qb->setParameter('uniqueID', $uniqueID);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Obtain the number of items
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @return int
     */
    public function getNbItems()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('COUNT(R)')
           ->from('OodBlogBundle:Post', 'R');

        try {
            $numberOfEvents = (int)$qb->getQuery()->getSingleScalarResult();
        } catch (\Exception $e) {
            $numberOfEvents = 0;
        }

        return (int)$numberOfEvents;
    }
}
